import Telegraf, { ContextMessageUpdate } from "telegraf";
import { Message } from "telegraf/typings/telegram-types";
import { config } from "./config";
import * as repository from "./db/repository";
import { NodeMedia, PostPhoto, User } from "./model";
import { convertCaptionToTags, getArraySubarrays, getContent, responseOnCommand, sleep } from "./service";

let localHost: boolean = true;

const bot = new Telegraf(config.BOT_TOKEN);
//–ª–æ–∫–∞–ª—å–Ω—ã–π —Ö–æ—Å—Ç
if (localHost) bot.launch();
else {
  //Heroku
  bot.telegram.setWebhook(`${process.env.APP_URL || config.HOST}/bot${config.BOT_TOKEN}`);
  bot.startWebhook(`/bot${config.BOT_TOKEN}`, null, Number(process.env.PORT) || 5000);
}

bot.start(ctx => {
  ctx.reply("Welcome!");
  if (ctx.chat && ctx.from && !ctx.from.is_bot) {
    const newUser: User | null = getUser(ctx);
    newUser && repository.newUser(newUser);
  }
});

// bot.command("/chat_id", ctx => {
//   if (ctx.chat) ctx.reply(ctx.chat.id.toString());
//   else ctx.reply("–ø—É—Å—Ç–æ (:");
// });

let tmpPhotos: NodeMedia[] = [];
bot.on("message", async ctx => {
  if (ctx.chat && ctx.message) {
    const user: User | null = getUser(ctx);
    user && repository.updateUserLastDate(user); //–æ–±–Ω–æ–≤–ª—è–µ–º –¥–∞—Ç—É –ø–æ—Å–ª. –≤–∑–∞–∏–º–æ–¥–µ–π—Ç—Å–≤–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    //—Ä–∞–±–æ—Ç–∞ —Å API –¥—Ä—É–≥–∏—Ö —Å–µ—Ä–≤–∏—Å–æ–≤ (–ø–µ—Ä–µ—Å—ã–ª–∫–∞ —Ñ–æ—Ç–æ –ø–æ —Å—Å—ã–ª–∫–µ)
    if (ctx.message.text?.match(/https:(.+)/)) {
      let arrMessageBot: number[] = [];
      arrMessageBot.push((await ctx.reply("–º–∏–Ω—É—Ç—É...")).message_id);
      getContent(ctx.message.text, async (arrPhoto: PostPhoto[] | null) => {
        if (arrPhoto && ctx.message && ctx.chat) {
          const [arrayMedia, numberArrays] = getArraySubarrays<PostPhoto>(arrPhoto, 10);
          for (let i = 0; i < numberArrays; i++) {
            if (arrayMedia[i].length > 1) await ctx.telegram.sendMediaGroup(ctx.chat.id, arrayMedia[i]);
            else await ctx.telegram.sendPhoto(ctx.chat.id, arrayMedia[i][0].media);
          }
          bot.telegram.deleteMessage(ctx.chat.id, ctx.message.message_id); //—É–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        } else arrMessageBot.push((await ctx.reply("üßê")).message_id); //–µ—Å–ª–∏ –≤—Å–µ –∂–µ –ø—É—Å—Ç–æ
      });
      await sleep(1000);
      await arrMessageBot.forEach(item => ctx.chat && ctx.message && bot.telegram.deleteMessage(ctx.chat.id, item)); //—É–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –±–æ—Ç–∞
    }
    //–∫–æ–º–∞–Ω–¥—ã
    else if (ctx.message.text?.match(/\/(.+)/)) {
      ctx.reply(await responseOnCommand(ctx.chat.id, ctx.message.text, ctx));
      bot.telegram.deleteMessage(ctx.chat.id, ctx.message.message_id);
    }
    //—Ä–∞–±–æ—Ç–∞ —Å Media –∫–æ–Ω—Ç–µ–Ω—Ç–æ–º (—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ñ–æ—Ç–æ)
    else if (ctx.message.photo && ctx.chat.id && ctx.message.message_id) {
      const tmpFileId = ctx.message.photo.pop()?.file_id;
      if (tmpFileId) {
        const newPhoto: NodeMedia = {
          messageId: ctx.message.message_id,
          mediaGroupId: ctx.message.media_group_id || null,
          tags: convertCaptionToTags(ctx.message.caption || ""),
          photoId: tmpFileId
        };
        tmpPhotos.push(newPhoto);
        await sleep(1200); //–æ–∂–∏–¥–∞–Ω–∏–µ –¥–ª—è –≥—Ä—É–ø–ø—ã —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π
        //—É–¥–∞–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
        tmpPhotos.forEach(item => {
          ctx.chat?.id && item.messageId && bot.telegram.deleteMessage(ctx.chat.id, item.messageId);
          item.tags = tmpPhotos[0].tags;
          item.messageId = null;
        });
        //—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π
        repository.createPhoto(ctx.chat.id, tmpPhotos.slice(0));
        successSavePhoto(ctx.chat.id, tmpPhotos.length);
      }
    }
    //—Ä–∞–±–æ—Ç–∞ —Å Media –∫–æ–Ω—Ç–µ–Ω—Ç–æ–º (—É–¥–∞–ª–µ–Ω–∏–µ —Ñ–æ—Ç–æ)
    else if (ctx.message.reply_to_message && ctx.message.reply_to_message.photo) {
      const tmpFileId = ctx.message.reply_to_message.photo.pop()?.file_id;
      if (tmpFileId) {
        const deletePhoto: NodeMedia = {
          messageId: ctx.message.reply_to_message.message_id,
          mediaGroupId: null,
          tags: [],
          photoId: tmpFileId
        };
        const deleteMessageId = await repository.deletePhoto(ctx.chat.id, deletePhoto);
        deleteMessageId && bot.telegram.deleteMessage(ctx.chat.id, deleteMessageId);
        bot.telegram.deleteMessage(ctx.chat.id, ctx.message.message_id);
      }
    }
    //—Ä–∞–±–æ—Ç–∞ —Å Media –∫–æ–Ω—Ç–µ–Ω—Ç–æ–º (–≤—ã–≤–æ–¥ —Ñ–æ—Ç–æ (–ø–æ —Å–ø–∏—Å–∫—É —Ç–µ–≥–æ–≤ –°–¢–†–û–ì–û))
    else if (ctx.message.text?.match(/^#(.+)/)) {
      const tags: string[] = convertCaptionToTags(ctx.message.text);
      const [arrayMedia, numberArrays, messageIdDelete] = await repository.readPhoto(ctx.chat.id, tags);
      let getMessage: Message[] = []; //–∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø—Ä–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
      if (arrayMedia.length && numberArrays) {
        for (let i = 0; i < numberArrays; i++) {
          if (arrayMedia[i].length > 1) {
            arrayMedia[i][0].caption = tags.join(" ");
            getMessage = getMessage.concat(await ctx.telegram.sendMediaGroup(ctx.chat.id, arrayMedia[i])); //–≤—ã–≤–æ–¥, –∏ –ø–æ–ª—É—á–µ–Ω–∏–µ id, —Å–æ–æ–±—â–µ–Ω–∏–π
          } else
            getMessage = getMessage.concat(
              await ctx.telegram.sendPhoto(ctx.chat.id, arrayMedia[i][0].media, { caption: tags.join(" ") })
            );
        }
        //–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏ —É–¥–∞–ª–µ–Ω–∏–µ —Å—Ç–∞—Ä—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π (–∫–æ–ø–∏–π)
        repository.updatePhoto(ctx.chat.id, getMessage);
        for (const iterator of messageIdDelete) bot.telegram.deleteMessage(ctx.chat.id, iterator);
        bot.telegram.deleteMessage(ctx.chat.id, ctx.message.message_id);
      } else ctx.reply(await responseOnCommand(ctx.chat.id, "", ctx)); //–µ—Å–ª–∏ –≤—Å–µ –∂–µ –ø—É—Å—Ç–æ
    }
  }
  tmpPhotos.length = 0;
});

/** —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–º –ø—Ä–∏–Ω—è—Ç–∏–∏ —Ñ–æ—Ç–æ */
let lock_successSavePhoto: boolean = false;
async function successSavePhoto(chatId: number, count: number) {
  if (!lock_successSavePhoto) {
    lock_successSavePhoto = true;
    const message = await bot.telegram.sendPhoto(chatId, config.SUCCESS_SAVE_PHOTO, { caption: count.toString() });
    await sleep(3000); //–æ–∂–∏–¥–∞–Ω–∏–µ
    bot.telegram.deleteMessage(chatId, message.message_id);
    lock_successSavePhoto = false;
  }
}

function getUser(ctx: ContextMessageUpdate): User | null {
  if (ctx.chat && ctx.from && !ctx.from.is_bot) {
    const User: User = {
      chatId: ctx.chat.id,
      lastDate: new Date().getTime(),
      firstName: ctx.from.first_name || null,
      lastName: ctx.from.last_name || null,
      userName: ctx.from.username ? "@" + ctx.from.username : null
    };
    return User;
  }
  return null;
}

//TODO: tmpPhotos –ø–µ—Ä–µ–¥–µ–ª–∞—Ç—å –¥–ª—è –º–∞—Å—Å–∏–≤–∞ —á–∞—Ç–æ–≤, –∞ —Ç–æ —â–∞—Å –Ω–µ –æ—á–µ–Ω—å –∫—Ä–µ–ø–∫–æ)))
//TODO: —Ç–æ–∂–µ —Å–∞–º–æ–µ —Å lock_successSavePhoto
